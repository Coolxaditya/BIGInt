#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include"Biginteger.h"

struct node {
    int data;
    struct node* next;
};

struct BigInteger {
    struct node* L;
    int length;
    int sign;
};

struct node* list(char str[]) {
    struct node* head = NULL, *itr = NULL;

    for (int i = 0; str[i] != '\0'; ++i) {
        if (str[i] >= '0' && str[i] <= '9') {
            struct node* newNode = (struct node*)malloc(sizeof(struct node));
            newNode->data = str[i] - '0'; 
            newNode->next = NULL;

            if (head == NULL) {
                head = newNode;
                itr = head;
            } else {
                itr->next = newNode;
                itr = itr->next;
            }
        }
    }
    return head;
} 

struct node* reverse(struct node* head) {
    struct node* cur = head, *next, *prev = NULL;

    while (cur) {
        next = cur->next;
        cur->next = prev;
        prev = cur;
        cur = next;
    }

    return prev;
}

int length(struct node* head) {
    int l = 0; 
    while (head) {
        ++l;
        head = head->next;
    }
    return l;
}

void display(struct node* head) {
    while (head) {
        printf("%d", head->data);
        head = head->next;
    }
}

struct node* newNode(int val) {
    struct node* temp = (struct node*)malloc(sizeof(struct node));
    temp->data = val;
    temp->next = NULL;
    return temp;
}

struct BigInteger createBigInteger(char str[], int sign) {
    struct BigInteger bigint;
    bigint.L = reverse(list(str)); // Reverse the list
    bigint.length = length(bigint.L);
    bigint.sign = sign;
    return bigint;
}

struct BigInteger add(struct BigInteger num1, struct BigInteger num2) {
    struct node* l1 = num1.L;
    struct node* l2 = num2.L;
    struct node* res = NULL;
    struct node* itr = NULL;
    int sum, carry = 0;

    while (l1 || l2) {
        int val1 = (l1) ? l1->data : 0;
        int val2 = (l2) ? l2->data : 0;

        sum = val1 + val2 + carry;
        carry = sum / 10;

        struct node* newNode = (struct node*)malloc(sizeof(struct node));
        newNode->data = sum % 10;
        newNode->next = NULL;

        if (res == NULL) {
            res = newNode;
            itr = res;
        } else {
            itr->next = newNode;
            itr = itr->next;
        }

        if (l1) l1 = l1->next;
        if (l2) l2 = l2->next;
    }

    if (carry) {
        struct node* newNode = (struct node*)malloc(sizeof(struct node));
        newNode->data = carry;
        newNode->next = NULL;

        itr->next = newNode;
    }

    struct BigInteger result;
    result.L = reverse(res); // Reverse the result back to correct order
    result.length = length(result.L);
    result.sign = num1.sign; // Assuming both numbers have the same sign

    return result;
}

struct BigInteger initialize(char *s) {
    int sign = 1; // Assume positive initially

    if (*s == '-') {
        sign = -1; // Change sign to negative
        s++; // Move pointer past '-'
    }

    return createBigInteger(s, sign);
}
struct BigInteger sub(struct BigInteger num1, struct BigInteger num2) {
    struct node* l1 = num1.L;
    struct node* l2 = num2.L;
    struct node* res = NULL;
    struct node* itr = NULL;
    int diff, borrow = 0;

    while (l1 || l2) {
        int val1 = (l1) ? l1->data : 0;
        int val2 = (l2) ? l2->data : 0;

        diff = val1 - val2 - borrow;
        borrow = (diff < 0) ? 1 : 0;
        if (diff < 0) {
            diff += 10;
        }

        struct node* newNode = (struct node*)malloc(sizeof(struct node));
        newNode->data = diff;
        newNode->next = NULL;

        if (res == NULL) {
            res = newNode;
            itr = res;
        } else {
            itr->next = newNode;
            itr = itr->next;
        }

        if (l1) l1 = l1->next;
        if (l2) l2 = l2->next;
    }

    struct BigInteger result;
    result.L = reverse(res); // Reverse the result back to correct order
    result.length = length(result.L);
    result.sign = num1.sign; // Assuming both numbers have the same sign
    while(result.L->data == 0) {
    result.L = result.L->next;
}
    return result;
}



struct BigInteger div1(struct BigInteger num1, struct BigInteger num2) {
    
    struct BigInteger div1(struct BigInteger num1, struct BigInteger num2) {
    if (length(num2.L) == 1 && num2.L->data == 0) {
        // Division by zero, handle as needed (e.g., return an error).
        printf("Error: Division by zero\n");
        exit(1);
    }

    // Initialize the result as 0.
    struct BigInteger result = createBigInteger("0", 1);

    // Make sure both numbers are positive for simplicity.
    num1.sign = 1;
    num2.sign = 1;

    // Perform repeated subtraction.
    while (num1.sign * num1.length >= num2.sign * num2.length) {
        num1 = sub(num1, num2);
        result = add(result, createBigInteger("1", 1));
    }

    // Adjust the sign of the result.
    result.sign = num1.sign * num2.sign;

    return result;
}

}


struct BigInteger mod(struct BigInteger num1, struct BigInteger num2) {
    
    struct BigInteger mod(struct BigInteger num1, struct BigInteger num2) {
    if (length(num2.L) == 1 && num2.L->data == 0) {
        // Modulus by zero, handle as needed (e.g., return an error).
        printf("Error: Modulus by zero\n");
        exit(1);
    }

    // Make sure both numbers are positive for simplicity.
    num1.sign = 1;
    num2.sign = 1;

    // Perform division to get the quotient.
    struct BigInteger quotient = div1(num1, num2);

    // Perform multiplication to get the product of quotient and divisor.
    struct BigInteger product = mul(quotient, num2);

    // Perform subtraction to get the remainder.
    struct BigInteger remainder = sub(num1, product);

    // Adjust the sign of the remainder.
    remainder.sign = num1.sign;

    return remainder;
}

}

struct node* insert_tail(struct node* head, int val) {
    struct node* newNode = (struct node*)malloc(sizeof(struct node));
    newNode->data = val;
    newNode->next = NULL;

    if (head == NULL) {
        return newNode;
    }

    struct node* temp = head;
    while (temp->next != NULL) {
        temp = temp->next;
    }

    temp->next = newNode;
    return head;
}

void free_list(struct node* head) {
    struct node* current = head;
    while (current != NULL) {
        struct node* next = current->next;
        free(current);
        current = next;
    }
}

struct BigInteger mul(struct BigInteger n1, struct BigInteger n2) {
    struct node* num1 = n1.L;
    struct node* num2 = n2.L;
    if (num1 == NULL || num2 == NULL) {
        struct BigInteger result = createBigInteger("0", 1);
        return result;
    }
    struct BigInteger result = createBigInteger("0", 1);
    struct BigInteger mid;
    int carry = 0, product = 0, i = 0;
    while (num2 != NULL) {
        struct node* num1 = n1.L;
        carry = 0;
        mid = createBigInteger("0", 1);
        for (int j = 0; j < i; j++) {
            mid.L = insert_tail(mid.L, 0);
        }
        while (num1 != NULL) {
            product = (num1->data) * (num2->data) + carry;
            mid.L = insert_tail(mid.L, product % 10);
            carry = product / 10;
            num1 = num1->next;
        }
        if (carry > 0) {
            mid.L = insert_tail(mid.L, carry);
        }
        result = add(mid, result);
       
        num2 = num2->next;
        i++;
    }
    if (n1.sign != n2.sign) {
        result.sign = -1;
    }
    return result;
}


int main() {
    char s1[100], s2[100];
    printf("Enter first number: ");
    fgets(s1, 100, stdin);
    printf("Enter second number: ");
    fgets(s2, 100, stdin);

    struct BigInteger num1 = initialize(s1);
    struct BigInteger num2 = initialize(s2);

    struct BigInteger sum = add(num1, num2);
    struct BigInteger division = div1(num1, num2);
    struct BigInteger product = mul(num1, num2);
    struct BigInteger modulus = mod(num1, num2);
    struct BigInteger difference = sub(num1, num2);

    printf("Sum: ");
    display(sum.L);
    printf("\n");

    printf("Difference: ");
    display(difference.L);
    printf("\n");
    
    printf("Product: ");
    display(product.L);
    printf("\n");
    
    printf("Division: ");
    display(division.L);
    printf("\n");


    printf("Modulus: ");
    display(modulus.L);
    printf("\n");

    

    return 0;
}